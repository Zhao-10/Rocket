backward = function(nn, k){
  d = nn$d
  n = d[length(d)]
  h_L = nn$h[[length(d)]]
  
  probs = exp(h_L) / sum(exp(h_L))
  
  dL_dh = probs
  dL_dh[k] = dL_dh[k] - 1
  
  dh = vector("list", length(nn$h))
  dW = vector("list", length(nn$W))
  db = vector("list", length(nn$b))
  
  #从输出层开始到输入层
  for(i in length(nn$h):2){
    # 当前层的dh
    dh[[i]] = dL_dh
    dl_1 = dL_dh * (nn$h[[i]] > 0)
    # 计算上一层的dW
    dW[[i-1]] = dl_1 %*% t(nn$h[[i-1]])
    # 计算上一层的db
    db[[i-1]] = dl_1
    
    #如果不是第一层，继续计算
    if(i >1){
      # working backwards applying the chain rule
      dL_dh = t(nn$W[[i-1]]) %*% dl_1
    }
  }
  return(list(dh=dh, dW=dW, db=db))
}
#Test3
nn = forward(nn, inp)
backward(nn, 2)
